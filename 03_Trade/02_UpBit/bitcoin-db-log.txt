docker run --name bc -p 55432:5432 -e POSTGRES_PASSWORD=123qwe -d postgres:10.4
docker ps
docker exec -it bc /bin/bash

root@78779b6363ea:/# psql -h localhost -p 5432 -U postgres

postgres=# CREATE ROLE myuser WITH LOGIN PASSWORD '123qwe' ;

postgres=# \dg
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 myuser    |                                                            | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}


postgres=# CREATE DATABASE mydatabase WITH OWNER = myuser ENCODING = 'UTF8' ;
CREATE DATABASE

postgres=# GRANT ALL privileges ON DATABASE mydatabase TO myuser ;
GRANT

postgres=# \l
                                 List of databases
    Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges
------------+----------+----------+------------+------------+-----------------------
 mydatabase | myuser   | UTF8     | en_US.utf8 | en_US.utf8 | =Tc/myuser           +
            |          |          |            |            | myuser=CTc/myuser
 postgres   | postgres | UTF8     | en_US.utf8 | en_US.utf8 |
 template0  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
            |          |          |            |            | postgres=CTc/postgres
 template1  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
            |          |          |            |            | postgres=CTc/postgres
(4 rows)

postgres=# \q

root@f1f05ac7d5ac:/# echo "psql -h localhost -p 5432 -U myuser -d mydatabase" > mydatabase.sh
root@f1f05ac7d5ac:/# chmod +x mydatabase.sh
root@f1f05ac7d5ac:/# ./mydatabase.sh
psql (10.4 (Debian 10.4-2.pgdg90+1))
Type "help" for help.

mydatabase=> \q

mydatabase=> 
CREATE TABLE crawl (
    id SERIAL NOT NULL PRIMARY KEY,
    url VARCHAR(150) NOT NULL,
    response JSON NOT NULL
);
CREATE TABLE

mydatabase=> 
SELECT 
    id, --url,
    response_each ->> 'code' AS code,
    response_each ->> 'candleDateTime' AS candleDateTime,
    response_each ->> 'candleDateTimeKst' AS candleDateTimeKst,
    response_each ->> 'openingPrice' AS openingPrice,
    response_each ->> 'highPrice' AS highPrice,
    response_each ->> 'lowPrice' AS lowPrice,
    response_each ->> 'tradePrice' AS tradePrice,
    response_each ->> 'candleAccTradeVolume' AS candleAccTradeVolume,
    response_each ->> 'candleAccTradePrice' AS candleAccTradePrice,
    (response_each ->> 'timestamp') :: bigint AS timestamp,
    response_each ->> 'unit' AS unit
FROM ( 
    SELECT id, url, json_array_elements(response) AS response_each 
    FROM crawl 
) AS a 
ORDER BY
    id, timestamp
;
